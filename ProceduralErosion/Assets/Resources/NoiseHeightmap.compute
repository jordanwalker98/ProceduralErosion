// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel GenHeightmap
RWTexture2D<float> map;

float2 offset;
int border;
int mapSize;
float noiseFreq;

float grad(int hash, float3 p) {
	int h = hash & 15;							  // CONVERT LO 4 BITS OF HASH CODE
	float u = h < 8 ? p.x : p.y,                 // INTO 12 GRADIENT DIRECTIONS.
		v = h < 4 ? p.y : h == 12 || h == 14 ? p.x : p.z;
	return ((h & 1) == 0 ? u : -u) + ((h & 2) == 0 ? v : -v);
}

static const int permTable[512] = {
	151, 160, 137, 91, 90, 15,
	131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23,
	190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33,
	88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166,
	77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244,
	102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196,
	135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123,
	5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42,
	223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9,
	129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228,
	251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107,
	49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254,
	138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180,
	151, 160, 137, 91, 90, 15,
	131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23,
	190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33,
	88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166,
	77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244,
	102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196,
	135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123,
	5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42,
	223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9,
	129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228,
	251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107,
	49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254,
	138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180
};

int perm(int x) {

	return permTable[x];
}

float3 fade(float3 t) {
	return t * t * t * (t * (t * 6.0f - 15.0f) + 10.0f);
}

float Perlin(float3 pos) {

	float3 fp = floor(pos);

	// FIND UNIT CUBE THAT
	// CONTAINS POINT
	float3 p = float3(pos - fp);

	int3 P;
	P.x = int(fp.x) & 255;
	P.y = int(fp.y) & 255;
	P.z = int(fp.z) & 255;

	// FIND RELATIVE X,Y,Z
	// OF POINT IN CUBE

	float3 f = fade(p);

	// COMPUTE FADE CURVES
	// FOR EACH OF X,Y,Z

	int A = perm(P.x) + P.y;
	int AA = perm(A) + P.z;

	int AB = perm(A + 1) + P.z;
	int B = perm(P.x + 1) + P.y;

	int BA = perm(B) + P.z;
	int BB = perm(B + 1) + P.z;

	// HASH COORDINATES OF
	// THE 8 CUBE CORNERS

	return lerp(

		lerp(lerp(grad(perm(AA), p),

			grad(perm(BA), p + float3(-1, 0, 0)), f.x),

			lerp(grad(perm(AB), p + float3(0, -1, 0)),

				grad(perm(BB), p + float3(-1, -1, 0)), f.x), f.y),

		lerp(lerp(grad(perm(AA + 1), p + float3(0, 0, -1)),

			grad(perm(BA + 1), p + float3(-1, 0, -1)), f.x),

			lerp(grad(perm(AB + 1), p + float3(0, -1, -1)),

				grad(perm(BB + 1), p + float3(-1, -1, -1)), f.x), f.y),

		f.z);

}

[numthreads(8, 8, 1)]
void GenHeightmap(uint3 id : SV_DispatchThreadID) {
	float2 uv = float2(id.xy - border + 0.5) / mapSize + offset;
	float global = Perlin(float3(uv*0.1, 0));
	float n = 0;
	float nf = noiseFreq;
	float na = 0.6;
	for (int i = 0; i < 7; i++) {
		n += Perlin(float3(uv * nf, 0)) * na;
		na *= 0.5;
		nf *= 2.0;
	}
	map[id.xy] = max(0.01, smoothstep(-0.2, 1, n)*0.5+0.2);
}
